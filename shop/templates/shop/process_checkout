from django.shortcuts import redirect
from django.contrib import messages
import stripe
from django.conf import settings
from .models import CartItem, Order
from decimal import Decimal

stripe.api_key = settings.STRIPE_SECRET_KEY

def process_checkout(request):
    if request.method == 'POST':
        # Fetch cart items for the current user
        cart_items = CartItem.objects.filter(cart__user=request.user)
        
        # Check if the cart is empty
        if not cart_items.exists():
            messages.error(request, 'Your cart is empty. Please add items to your cart before checking out.')
            return redirect('checkout')

        cart_total = sum(item.cupcake.price * item.quantity for item in cart_items)

        # Get delivery/pickup details
        delivery_address = request.POST.get('delivery_address')
        city = request.POST.get('city')
        postal_code = request.POST.get('postal_code')
        country = request.POST.get('country')
        store_pickup = request.POST.get('store_pickup') == 'on'

        # Check for Stripe token
        stripe_token = request.POST.get('stripeToken')
        if not stripe_token:
            messages.error(request, 'Payment failed: No payment method provided.')
            return redirect('checkout')

        try:
            # Create a Stripe charge
            charge = stripe.Charge.create(
                amount=int(Decimal(cart_total) * 100),  # Convert to cents
                currency='usd',
                description='Cupcake Shop Purchase',
                source=stripe_token
            )

            # Create an order
            order = Order.objects.create(
                user=request.user,
                total_price=cart_total,
                delivery_address=delivery_address if not store_pickup else None,
                city=city if not store_pickup else None,
                postal_code=postal_code if not store_pickup else None,
                country=country if not store_pickup else None,
                store_pickup=store_pickup
            )

            # Clear the cart after successful payment
            cart_items.delete()

            messages.success(request, 'Payment successful! Your order has been placed.')
            return redirect('order_confirmation')
        except stripe.error.CardError as e:
            messages.error(request, f'Card error: {e.user_message}')
        except stripe.error.RateLimitError:
            messages.error(request, 'Rate limit exceeded. Please try again later.')
        except stripe.error.InvalidRequestError as e:
            messages.error(request, f'Invalid request: {e.user_message}')
        except stripe.error.AuthenticationError:
            messages.error(request, 'Authentication error. Please contact support.')
        except stripe.error.APIConnectionError:
            messages.error(request, 'Network error. Please check your connection.')
        except stripe.error.StripeError as e:
            messages.error(request, f'Payment failed: {e.user_message}')
        except Exception as e:
            messages.error(request, f'An unexpected error occurred: {str(e)}')

        return redirect('checkout')
    
    return redirect('checkout')